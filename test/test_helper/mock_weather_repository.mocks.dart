// Mocks generated by Mockito 5.4.6 from annotations
// in weather_forecasting/test/test_helper/mock_weather_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_forecasting/weather_forecasting.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i3.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>> getCurrentWeather(
    _i3.LatLong? latLong,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentWeather, [latLong]),
            returnValue:
                _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>>.value(
                  _FakeEither_0<_i3.Failure, _i3.CurrentWeather>(
                    this,
                    Invocation.method(#getCurrentWeather, [latLong]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>>);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.HourlyWeatherForecast>>
  getHourlyWeather(_i3.LatLong? latLong) =>
      (super.noSuchMethod(
            Invocation.method(#getHourlyWeather, [latLong]),
            returnValue: _i4.Future<
              _i2.Either<_i3.Failure, _i3.HourlyWeatherForecast>
            >.value(
              _FakeEither_0<_i3.Failure, _i3.HourlyWeatherForecast>(
                this,
                Invocation.method(#getHourlyWeather, [latLong]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.HourlyWeatherForecast>>);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.WeeklyWeather>> getWeeklyWeather(
    _i3.LatLong? latLong,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWeeklyWeather, [latLong]),
            returnValue:
                _i4.Future<_i2.Either<_i3.Failure, _i3.WeeklyWeather>>.value(
                  _FakeEither_0<_i3.Failure, _i3.WeeklyWeather>(
                    this,
                    Invocation.method(#getWeeklyWeather, [latLong]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.WeeklyWeather>>);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeatherModel>> getWeatherByCity(
    String? cityName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherByCity, [cityName]),
            returnValue: _i4.Future<
              _i2.Either<_i3.Failure, _i3.CurrentWeatherModel>
            >.value(
              _FakeEither_0<_i3.Failure, _i3.CurrentWeatherModel>(
                this,
                Invocation.method(#getWeatherByCity, [cityName]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeatherModel>>);
}
