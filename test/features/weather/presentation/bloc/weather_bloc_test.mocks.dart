// Mocks generated by Mockito 5.4.6 from annotations
// in weather_forecasting/test/features/weather/presentation/bloc/weather_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_forecasting/weather_forecasting.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherRepository_1 extends _i1.SmartFake
    implements _i3.WeatherRepository {
  _FakeWeatherRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetLatLongImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLatLongImpl extends _i1.Mock implements _i3.GetLatLongImpl {
  MockGetLatLongImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.LatLong>> getLatLong() =>
      (super.noSuchMethod(
            Invocation.method(#getLatLong, []),
            returnValue: _i4.Future<_i2.Either<_i3.Failure, _i3.LatLong>>.value(
              _FakeEither_0<_i3.Failure, _i3.LatLong>(
                this,
                Invocation.method(#getLatLong, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.LatLong>>);
}

/// A class which mocks [GetCurrentWeather].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentWeather extends _i1.Mock implements _i3.GetCurrentWeather {
  MockGetCurrentWeather() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.WeatherRepository);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>> call(
    _i3.WeatherParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>>.value(
                  _FakeEither_0<_i3.Failure, _i3.CurrentWeather>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>>);
}

/// A class which mocks [GetHourlyWeather].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHourlyWeather extends _i1.Mock implements _i3.GetHourlyWeather {
  MockGetHourlyWeather() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.WeatherRepository);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.HourlyWeatherForecast>> call(
    _i3.WeatherParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<
              _i2.Either<_i3.Failure, _i3.HourlyWeatherForecast>
            >.value(
              _FakeEither_0<_i3.Failure, _i3.HourlyWeatherForecast>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.HourlyWeatherForecast>>);

  @override
  List<_i3.HourlyWeatherData> getWeatherByDate({
    required List<_i3.HourlyWeatherData>? hourlyWeatherList,
    DateTime? date,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getWeatherByDate, [], {
              #hourlyWeatherList: hourlyWeatherList,
              #date: date,
            }),
            returnValue: <_i3.HourlyWeatherData>[],
          )
          as List<_i3.HourlyWeatherData>);
}

/// A class which mocks [GetWeeklyWeather].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeeklyWeather extends _i1.Mock implements _i3.GetWeeklyWeather {
  MockGetWeeklyWeather() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.WeatherRepository);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.WeeklyWeather>> call(
    _i3.WeatherParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i2.Either<_i3.Failure, _i3.WeeklyWeather>>.value(
                  _FakeEither_0<_i3.Failure, _i3.WeeklyWeather>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.WeeklyWeather>>);
}

/// A class which mocks [GetWeatherByCityName].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherByCityName extends _i1.Mock
    implements _i3.GetWeatherByCityName {
  MockGetWeatherByCityName() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WeatherRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWeatherRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.WeatherRepository);

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>> call(
    String? cityName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [cityName]),
            returnValue:
                _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>>.value(
                  _FakeEither_0<_i3.Failure, _i3.CurrentWeather>(
                    this,
                    Invocation.method(#call, [cityName]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i3.Failure, _i3.CurrentWeather>>);
}
