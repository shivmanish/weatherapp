// Mocks generated by Mockito 5.4.6 from annotations
// in weather_forecasting/test/features/weather/data/repositories/weather_repository_imp_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_forecasting/weather_forecasting.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCurrentWeatherModel_0 extends _i1.SmartFake
    implements _i2.CurrentWeatherModel {
  _FakeCurrentWeatherModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHourlyWeatherForecastModel_1 extends _i1.SmartFake
    implements _i2.HourlyWeatherForecastModel {
  _FakeHourlyWeatherForecastModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeeklyWeatherModel_2 extends _i1.SmartFake
    implements _i2.WeeklyWeatherModel {
  _FakeWeeklyWeatherModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i2.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.CurrentWeatherModel> getCurrentWeather(_i2.LatLong? latLong) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentWeather, [latLong]),
            returnValue: _i3.Future<_i2.CurrentWeatherModel>.value(
              _FakeCurrentWeatherModel_0(
                this,
                Invocation.method(#getCurrentWeather, [latLong]),
              ),
            ),
          )
          as _i3.Future<_i2.CurrentWeatherModel>);

  @override
  _i3.Future<_i2.HourlyWeatherForecastModel> getHourlyWeather(
    _i2.LatLong? latLong,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getHourlyWeather, [latLong]),
            returnValue: _i3.Future<_i2.HourlyWeatherForecastModel>.value(
              _FakeHourlyWeatherForecastModel_1(
                this,
                Invocation.method(#getHourlyWeather, [latLong]),
              ),
            ),
          )
          as _i3.Future<_i2.HourlyWeatherForecastModel>);

  @override
  _i3.Future<_i2.WeeklyWeatherModel> getWeeklyWeather(_i2.LatLong? latLong) =>
      (super.noSuchMethod(
            Invocation.method(#getWeeklyWeather, [latLong]),
            returnValue: _i3.Future<_i2.WeeklyWeatherModel>.value(
              _FakeWeeklyWeatherModel_2(
                this,
                Invocation.method(#getWeeklyWeather, [latLong]),
              ),
            ),
          )
          as _i3.Future<_i2.WeeklyWeatherModel>);

  @override
  _i3.Future<_i2.CurrentWeatherModel> getCityWeather(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#getCityWeather, [query]),
            returnValue: _i3.Future<_i2.CurrentWeatherModel>.value(
              _FakeCurrentWeatherModel_0(
                this,
                Invocation.method(#getCityWeather, [query]),
              ),
            ),
          )
          as _i3.Future<_i2.CurrentWeatherModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
